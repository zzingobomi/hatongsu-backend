syntax = "proto3";

package album;

service AlbumService {
    // MainPage, Dashboard
    rpc GetAlbumImages(AlbumImageRequest) returns (AlbumImageResponse);
    rpc GetAlbumImagesCursor(AlbumImageCursorRequest) returns (AlbumImageCursorResponse);
    rpc GetAlbumImagesInfinite(AlbumImageInfiniteRequest) returns (AlbumImageInfiniteResponse);
    rpc GetAlbumImageFerrisNext(AlbumImageFerrisNextRequest) returns (AlbumImageFerrisNextResponse);
    rpc GetAlbumImageCountDate(AlbumImageCountDateRequest) returns (AlbumImageCountDateResponse);
    rpc DeleteAlbumImages(DeleteAlbumImagesRequest) returns (DeleteAlbumImagesResponse);

    // Gallery
    rpc GetAlbumImagesGallerySpot(AlbumImageGallerySpotRequest) returns (AlbumImageGallerySpotResponse);
    rpc UpdateGallerySpot(UpdateGallerySpotRequest) returns (UpdateGallerySpotResponse);
}

message AlbumImageProto {
    string id = 1;                              // 이미지 ID
    string filename = 2;                        // 이미지 파일명
    string path = 3;                            // 이미지 경로    
    optional string date_time = 4;              // 이미지 촬영 시간
    optional string date_time_original = 5;     // 원본 촬영 시간
    optional string date_time_digitized = 6;    // 디지털화 시간
    optional string gallery_spot_type = 7;      // 갤러리 스팟 타입
    string created_at = 8;                      // 생성 시간
    string updated_at = 9;                      // 수정 시간    
}

// message Filter {
//     string field = 1;
//     string value = 2;
// }

message Sort {
    string orderBy = 1;
    string order = 2;
}

message AlbumImageRequest {
    //Filter filters = 1;    
    repeated Sort sort = 2;
    int32 page = 3; 
    int32 limit = 4; 
}

message AlbumImageResponse {
    repeated AlbumImageProto album_images = 1;
    int32 total_count = 2;   
}

message AlbumImageCursorRequest {    
    optional string cursor = 1;   
    int32 limit = 2;      
}

message AlbumImageCursorResponse {
    repeated AlbumImageProto album_images = 1;
    string next_cursor = 2;
    bool has_next_page = 3;
}

message AlbumImageInfiniteRequest {    
    optional string next_cursor = 1;       
    //optional string prev_cursor = 2;       
    int32 limit = 3;    
}

message AlbumImageInfiniteResponse {
    repeated AlbumImageProto album_images = 1;
    string next_cursor = 2;
    //string prev_cursor = 3;
}

message AlbumImageFerrisNextRequest {    
    string id = 1;
    int32 skip = 2;
}

message AlbumImageFerrisNextResponse {
    AlbumImageProto album_image = 1;    
}

message AlbumImageCountDateRequest {
    string startDate = 1;
    string endDate = 2;
}

message CountDateResponse {
    string date = 1;
    int32 count = 2;
}

message AlbumImageCountDateResponse {
    repeated CountDateResponse result = 1;    
}

message DeleteAlbumImagesRequest {
    repeated string image_ids = 1;
}

message DeleteAlbumImagesResponse {
    bool success = 1;
    int32 deleted_count = 2;
}

message AlbumImageGallerySpotRequest {    
}

message AlbumImageList {
    repeated AlbumImageProto images = 1;
}

message AlbumImageGallerySpotResponse {
    map<string, AlbumImageList> spot_images = 1;
}

message UpdateGallerySpotRequest {
    string image_id = 1;
    string spot_type = 2;
}

message UpdateGallerySpotResponse {
    bool success = 1;
}
