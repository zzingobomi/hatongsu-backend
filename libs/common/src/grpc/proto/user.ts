// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.0
// source: proto/user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface RegisterUserRequest {
  credentials: string;
  nickname: string;
}

export interface RegisterUserResponse {
  success: boolean;
  message: string;
}

export interface LoginUserRequest {
  credentials: string;
}

export interface LoginUserResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ParseBearerTokenRequest {
  token: string;
}

export interface ParseBearerTokenResponse {
  sub: string;
}

export interface UserProto {
  id: string;
  email: string;
  nickname: string;
  profile?: string | undefined;
  role: string;
}

export interface Filter {
  field: string;
  value: string;
}

export interface Sort {
  orderBy: string;
  order: string;
}

export interface GetUserInfoRequest {
  userId: string;
}

export interface GetUserInfoResponse {
  user: UserProto | undefined;
}

export interface GetUsersRequest {
  filter: Filter | undefined;
  sort: Sort[];
  page: number;
  limit: number;
}

export interface GetUsersResponse {
  users: UserProto[];
  totalCount: number;
}

export const USER_PACKAGE_NAME = "user";

export interface AuthServiceClient {
  registerUser(request: RegisterUserRequest, metadata?: Metadata): Observable<RegisterUserResponse>;

  loginUser(request: LoginUserRequest, metadata?: Metadata): Observable<LoginUserResponse>;

  parseBearerToken(request: ParseBearerTokenRequest, metadata?: Metadata): Observable<ParseBearerTokenResponse>;
}

export interface AuthServiceController {
  registerUser(
    request: RegisterUserRequest,
    metadata?: Metadata,
  ): Promise<RegisterUserResponse> | Observable<RegisterUserResponse> | RegisterUserResponse;

  loginUser(
    request: LoginUserRequest,
    metadata?: Metadata,
  ): Promise<LoginUserResponse> | Observable<LoginUserResponse> | LoginUserResponse;

  parseBearerToken(
    request: ParseBearerTokenRequest,
    metadata?: Metadata,
  ): Promise<ParseBearerTokenResponse> | Observable<ParseBearerTokenResponse> | ParseBearerTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerUser", "loginUser", "parseBearerToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";

export interface UserServiceClient {
  getUserInfo(request: GetUserInfoRequest, metadata?: Metadata): Observable<GetUserInfoResponse>;

  getUsers(request: GetUsersRequest, metadata?: Metadata): Observable<GetUsersResponse>;
}

export interface UserServiceController {
  getUserInfo(
    request: GetUserInfoRequest,
    metadata?: Metadata,
  ): Promise<GetUserInfoResponse> | Observable<GetUserInfoResponse> | GetUserInfoResponse;

  getUsers(
    request: GetUsersRequest,
    metadata?: Metadata,
  ): Promise<GetUsersResponse> | Observable<GetUsersResponse> | GetUsersResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserInfo", "getUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
