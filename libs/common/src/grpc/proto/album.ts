// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.0
// source: proto/album.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "album";

export interface ImageUploadRequest {
  filename: string;
  content: Uint8Array;
}

export interface UploadResponse {
  message: string;
}

export const ALBUM_PACKAGE_NAME = "album";

export interface AlbumServiceClient {
  uploadImage(request: Observable<ImageUploadRequest>, metadata?: Metadata): Observable<UploadResponse>;
}

export interface AlbumServiceController {
  uploadImage(
    request: Observable<ImageUploadRequest>,
    metadata?: Metadata,
  ): Promise<UploadResponse> | Observable<UploadResponse> | UploadResponse;
}

export function AlbumServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AlbumService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["uploadImage"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AlbumService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ALBUM_SERVICE_NAME = "AlbumService";
