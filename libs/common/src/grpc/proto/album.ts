// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.0
// source: proto/album.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "album";

export interface AlbumImageProto {
  /** 이미지 ID */
  id: string;
  /** 이미지 파일명 */
  filename: string;
  /** 이미지 경로 */
  path: string;
  /** 이미지 촬영 시간 */
  dateTime?:
    | string
    | undefined;
  /** 원본 촬영 시간 */
  dateTimeOriginal?:
    | string
    | undefined;
  /** 디지털화 시간 */
  dateTimeDigitized?:
    | string
    | undefined;
  /** 생성 시간 */
  createdAt: string;
  /** 수정 시간 */
  updatedAt: string;
}

export interface Sort {
  orderBy: string;
  order: string;
}

export interface AlbumImageRequest {
  /** Filter filters = 1; */
  sort: Sort[];
  page: number;
  limit: number;
}

export interface AlbumImageResponse {
  albumImages: AlbumImageProto[];
  totalCount: number;
}

export const ALBUM_PACKAGE_NAME = "album";

export interface AlbumServiceClient {
  getAlbumImages(request: AlbumImageRequest, metadata?: Metadata): Observable<AlbumImageResponse>;
}

export interface AlbumServiceController {
  getAlbumImages(
    request: AlbumImageRequest,
    metadata?: Metadata,
  ): Promise<AlbumImageResponse> | Observable<AlbumImageResponse> | AlbumImageResponse;
}

export function AlbumServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAlbumImages"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AlbumService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AlbumService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ALBUM_SERVICE_NAME = "AlbumService";
